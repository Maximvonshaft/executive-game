openapi: 3.1.0
info:
  title: Phaser3-DDZ Service API
  version: 0.1.0
  description: |
    Phaser3 多平台斗地主服务端的 REST API 契约草案。
    本文件覆盖 MVP 阶段所需的鉴权、配置、对局、战绩查询能力，并为后续扩展预留 Schema。
servers:
  - url: https://api.dev.ddz.example.com
    description: 开发环境
  - url: https://api.staging.ddz.example.com
    description: 预发环境
  - url: https://api.ddz.example.com
    description: 生产环境

paths:
  /auth/wechat-mini/login:
    post:
      summary: 微信小游戏登录
      description: 使用微信小游戏 code 换取项目内 access token。
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WechatMiniLoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: code 无效或校验失败
  /auth/bytedance-mini/login:
    post:
      summary: 抖音小游戏登录
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BytedanceMiniLoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/telegram/webapp:
    post:
      summary: Telegram WebApp 登录
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramWebAppLoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: initData 验证失败
  /auth/basic/login:
    post:
      summary: H5 邮箱或手机号登录
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicLoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: 凭证错误
  /auth/token/refresh:
    post:
      summary: 刷新 access token
      security:
        - refreshToken: []
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: 刷新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: refresh token 无效

  /matchmaking/queue:
    post:
      summary: 加入匹配队列
      description: 玩家进入实时匹配。
      security:
        - bearerAuth: []
      tags: [Matchmaking]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchmakingJoinRequest'
      responses:
        '202':
          description: 已进入匹配，等待结果
    delete:
      summary: 退出匹配队列
      security:
        - bearerAuth: []
      tags: [Matchmaking]
      responses:
        '204':
          description: 退出成功
  /rooms/{roomId}/records:
    get:
      summary: 查询房间战绩
      security:
        - bearerAuth: []
      tags: [Records]
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 房间战绩详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomRecord'
        '404':
          description: 未找到战绩
  /profiles/me:
    get:
      summary: 查询当前用户资料
      security:
        - bearerAuth: []
      tags: [Profile]
      responses:
        '200':
          description: 用户资料
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 仅用于刷新接口
  schemas:
    AuthResponse:
      type: object
      required: [accessToken, refreshToken, uid, expiresIn]
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        uid:
          type: string
          format: uuid
        expiresIn:
          type: integer
          description: 有效期（秒）
        newUser:
          type: boolean
          description: 是否首次登录
    RefreshTokenRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
    WechatMiniLoginRequest:
      type: object
      required: [code]
      properties:
        code:
          type: string
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    BytedanceMiniLoginRequest:
      type: object
      required: [code]
      properties:
        code:
          type: string
        anonymousCode:
          type: string
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    TelegramWebAppLoginRequest:
      type: object
      required: [initData]
      properties:
        initData:
          type: string
        chatInstance:
          type: string
          description: 群聊场景下的 chat_instance
    BasicLoginRequest:
      type: object
      required: [identifier, password]
      properties:
        identifier:
          type: string
          description: 邮箱或手机号
        password:
          type: string
          format: password
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    MatchmakingJoinRequest:
      type: object
      required: [mode]
      properties:
        mode:
          type: string
          enum: [RANKED, CASUAL]
        seatPreference:
          type: string
          enum: [ANY, LANDLORD, FARMER]
        clientVersion:
          type: string
    RoomRecord:
      type: object
      required: [roomId, startedAt, finishedAt, players, rounds]
      properties:
        roomId:
          type: string
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        mode:
          type: string
          enum: [RANKED, CASUAL]
        players:
          type: array
          items:
            $ref: '#/components/schemas/RoomPlayer'
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/RoundEvent'
    RoomPlayer:
      type: object
      required: [uid, role, result]
      properties:
        uid:
          type: string
          format: uuid
        nickname:
          type: string
        avatar:
          type: string
          format: uri
        role:
          type: string
          enum: [LANDLORD, FARMER]
        result:
          type: string
          enum: [WIN, LOSE]
        scoreDelta:
          type: integer
    RoundEvent:
      type: object
      required: [seqId, eventType, payload]
      properties:
        seqId:
          type: integer
        eventType:
          type: string
          enum:
            - DEAL_CARDS
            - BID_START
            - BID_ACTION
            - MULTIPLIER_UPDATE
            - PLAY_CARDS
            - BOMB_TRIGGER
            - ROUND_END
            - GAME_END
        payload:
          type: object
          description: 事件体结构详见 `proto/room-events.md`
    UserProfile:
      type: object
      required: [uid, nickname, level, experience, identities]
      properties:
        uid:
          type: string
          format: uuid
        nickname:
          type: string
        avatar:
          type: string
          format: uri
        level:
          type: integer
        experience:
          type: integer
        identities:
          type: array
          items:
            $ref: '#/components/schemas/UserIdentity'
    UserIdentity:
      type: object
      required: [platform, platformUserId]
      properties:
        platform:
          type: string
          enum: [WECHAT_MINI, BYTEDANCE_MINI, TELEGRAM, H5]
        platformUserId:
          type: string
        linkedAt:
          type: string
          format: date-time
    DeviceInfo:
      type: object
      properties:
        platform:
          type: string
          description: 客户端平台，如 ios、android、wechat-mini
        model:
          type: string
        osVersion:
          type: string
        appVersion:
          type: string

